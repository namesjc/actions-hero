# .github/workflows/create-branch.yml
name: Create Branch, Commit Changes, and PR via Script (with PAT)

# Controls when the workflow will run
on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      new_branch_name:
        description: "Name for the new branch (e.g., feature/my-new-feature)"
        required: true
        default: "feature/new-branch"
      base_branch_name:
        description: "Branch to base the new branch on AND target for the PR"
        required: true
        default: "main" # Or your default branch
      commit_message:
        description: "Commit message for the automated change"
        required: false
        default: "feat: Add placeholder file"
      # pr_title:
      #   description: "Title for the Pull Request"
      #   required: false # Optional, provide a default
      #   default: "New Feature Branch"
      # pr_body:
      #   description: "Body/description for the Pull Request"
      #   required: false # Optional
      #   default: "Pull request automatically created by workflow."
      my_pat:
        description: "GitHub Personal Access Token (PAT) with repo scope"
        required: true
        default: "" # Leave empty, will be set in the workflow

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create_branch_commit_pr_job: # Renamed job for clarity
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Permissions for the default GITHUB_TOKEN (might still be needed for checkout or other actions)
    permissions:
      contents: write # Needed to create branches and push commits
      pull-requests: write # Needed to create PRs

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Use the github-script action to create the branch, passing the PAT
      - name: Create new branch
        id: create_branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.my_pat }} # Use the PAT provided in the workflow dispatch
          script: |
            // Get inputs from the workflow_dispatch event
            const newBranch = '${{ github.event.inputs.new_branch_name }}';
            const baseBranch = '${{ github.event.inputs.base_branch_name }}';
            const ref = `refs/heads/${newBranch}`;

            console.log(`Attempting to create branch '${newBranch}' from '${baseBranch}' using PAT authentication...`);
            try {
              console.log(`Fetching SHA for base branch '${baseBranch}'...`);
              const { data: baseBranchRef } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${baseBranch}`,
              });
              const baseSha = baseBranchRef.object.sha;
              console.log(`Base SHA for '${baseBranch}' is '${baseSha}'.`);

              console.log(`Creating ref '${ref}' pointing to SHA '${baseSha}'...`);
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: ref,
                sha: baseSha,
              });
              console.log(`Successfully created branch '${newBranch}'.`);
              core.setOutput("new_branch_name_output", newBranch);
            } catch (error) {
              console.error(`Error creating branch: ${error.message}`);
              if (error.status === 422) {
                core.setFailed(`Failed to create branch '${newBranch}'. It might already exist. Error: ${error}`);
              } else {
                core.setFailed(`Failed to create branch '${newBranch}'. Error: ${error}`);
              }
            }

      # Step 2: Checkout the newly created branch
      # Only run if the previous step succeeded and produced the branch name output
      - name: Checkout new branch
        if: success() && steps.create_branch.outputs.new_branch_name_output
        uses: actions/checkout@v4
        with:
          # Use the branch name output from the previous step
          ref: ${{ steps.create_branch.outputs.new_branch_name_output }}
          # Fetch depth 0 to get all history, might be needed for some git operations,
          # though not strictly necessary for just adding a commit. Can use 1 for efficiency.
          fetch-depth: 1

      # Step 3: Create changes, commit, and push
      - name: Create commit
        # Only run if checkout succeeded
        if: success()
        run: |
          echo "Adding a new line generated by workflow at $(date)" >> README.md
          # Or create a new file:
          # echo "This file was created by the workflow" > generated-file-${{ github.run_id }}.txt

          # Configure Git
          # Use the GitHub Actions bot user as the committer
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit the changes
          git add . # Add all changes
          git commit -m "${{ github.event.inputs.commit_message }}" # Use input for commit message

          # Push the changes back to the new branch
          # The checkout action configures authentication, so push should work directly
          git push origin ${{ steps.create_branch.outputs.new_branch_name_output }}

          echo "Changes committed and pushed to ${{ steps.create_branch.outputs.new_branch_name_output }}"

      # Step 4: Create a Pull Request from the new branch
      - name: Create Pull Request
        # Only run this step if the commit step succeeded (implies branch creation and checkout also succeeded)
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.my_pat }}
          script: |
            const newBranch = '${{ steps.create_branch.outputs.new_branch_name_output }}';
            const baseBranch = '${{ github.event.inputs.base_branch_name }}';
            const runNumber = process.env.GITHUB_RUN_NUMBER;
            const githubUrl = process.env.GITHUB_SERVER_URL;
            const prTitle = `Version Picker changes: Run#${runNumber}`;
            const prBody = `
              Version Picker changes:
              GITHUB_RUN_NUMBER: [${runNumber} - Overview](${githubUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              GITHUB_RUN_ID: ${context.runId}
              Date: ${new Date().toISOString().replace('T', ' ').slice(0, 19)}
            `.trim();

            console.log(`Creating Pull Request for branch '${newBranch}' targeting '${baseBranch}'...`);

            try {
              const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              head: newBranch,
              base: baseBranch,
              body: prBody,
              draft: false,
              });

              console.log(`Pull Request created: #${pullRequest.number} - ${pullRequest.html_url}`);
              core.setOutput("pr_url", pullRequest.html_url);
              core.summary
                .addHeading('Pull Request Details', 2)
                .addRaw(`- **PR Number**: #${pullRequest.number}`)
                .addRaw(`\n- **PR URL**: [${pullRequest.html_url}](${pullRequest.html_url})`)
                .addRaw(`\n- **Branch**: ${newBranch}`)
                .addRaw(`\n- **Base Branch**: ${baseBranch}`)
                .write();
            } catch (error) {
              console.error(`Failed to create Pull Request: ${error.message}`);

              if (error.message.includes("A pull request already exists")) {
              core.warning(`PR already exists for branch '${newBranch}'.`);
              } else if (error.message.includes("No commits between")) {
              core.warning(`No commits between '${newBranch}' and '${baseBranch}'.`);
              } else {
              core.setFailed(`Error creating Pull Request: ${error.message}`);
              }
            }
