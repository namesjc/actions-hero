# .github/workflows/create-branch.yml
name: Create Branch, Commit Changes, and PR via Script (with PAT)

# Controls when the workflow will run
on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      new_branch_name:
        description: "Name for the new branch (e.g., feature/my-new-feature)"
        required: true
        default: "feature/new-branch"
      base_branch_name:
        description: "Branch to base the new branch on AND target for the PR"
        required: true
        default: "main" # Or your default branch
      commit_message:
        description: "Commit message for the automated change"
        required: false
        default: "feat: Add placeholder file"
      # pr_title:
      #   description: "Title for the Pull Request"
      #   required: false # Optional, provide a default
      #   default: "New Feature Branch"
      # pr_body:
      #   description: "Body/description for the Pull Request"
      #   required: false # Optional
      #   default: "Pull request automatically created by workflow."
      my_pat:
        description: "GitHub Personal Access Token (PAT) with repo scope"
        required: true
        default: "" # Leave empty, will be set in the workflow

jobs:
  create_branch_commit_pr_job:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Create new branch
        id: create_branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.my_pat }}
          script: |
            // Get inputs from the workflow_dispatch event
            const newBranch = '${{ github.event.inputs.new_branch_name }}';
            const baseBranch = '${{ github.event.inputs.base_branch_name }}';
            const repoUrl = context.payload.repository.html_url;
            const ref = `refs/heads/${newBranch}`;

            console.log(`Creating branch '${newBranch}' from '${baseBranch}'...`);

            try {
              // Fetch the SHA of the base branch
              const { data: baseBranchRef } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${baseBranch}`,
              });
              const baseSha = baseBranchRef.object.sha;

              // Create the new branch
              await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              sha: baseSha,
              });

              const branchUrl = `${repoUrl}/tree/${newBranch}`;
              console.log(`Branch '${newBranch}' created successfully.`);

              // Update summary and outputs
              core.summary
              .addHeading('Branch Creation', 2)
              .addRaw(`* ✅ Successfully created branch: [${newBranch}](${branchUrl})\n`, true)
              .addRaw(`* Base Branch: \`${baseBranch}\`\n`)
              .addSeparator();
              await core.summary.write({ overwrite: false });

              core.setOutput("new_branch_name_output", newBranch);
            } catch (error) {
              console.error(`Failed to create branch: ${error.message}`);

              // Update summary with error details
              core.summary
              .addHeading('Branch Creation', 2)
              .addRaw(`* ❌ Failed to create branch '${newBranch}'. Error: ${error.message}\n`)
              .addSeparator();
              await core.summary.write();

              // Handle specific error cases
              if (error.status === 422) {
              core.setFailed(`Branch '${newBranch}' already exists. Error: ${error.message}`);
              } else {
              core.setFailed(`Error creating branch '${newBranch}': ${error.message}`);
              }
            }

      - name: Checkout new branch
        if: success() && steps.create_branch.outputs.new_branch_name_output
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.create_branch.outputs.new_branch_name_output }}
          fetch-depth: 1

      - name: Create commit
        if: success()
        run: |
          echo "Adding a new line generated by workflow at $(date)" >> README.md
          # Or create a new file:
          # echo "This file was created by the workflow" > generated-file-${{ github.run_id }}.txt

          # Configure Git
          # Use the GitHub Actions bot user as the committer
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit the changes
          git add . # Add all changes

          if git diff --staged --quiet; then
            echo "No changes to commit."
            echo "commit_sha=NONE" >> $GITHUB_OUTPUT # Set output even if no commit
          else
            git commit -m "${{ github.event.inputs.commit_message }}" # Use input for commit message
            git push origin ${{ steps.create_branch.outputs.new_branch_name_output }}
            COMMIT_SHA=$(git rev-parse HEAD) # Get the SHA of the new commit
            echo "Changes committed and pushed to ${{ steps.create_branch.outputs.new_branch_name_output }}. Commit SHA: $COMMIT_SHA"
            echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT # Output the commit SHA
          fi

      - name: Update Summary with Commit Info
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const commitSha = '${{ steps.create_commit.outputs.commit_sha }}';
            const branchName = '${{ steps.create_branch.outputs.new_branch_name_output }}';
            const repoUrl = context.payload.repository.html_url;

            core.summary.addHeading('Commit Details', 2);

            if (!commitSha || commitSha === 'NONE') {
              const message = commitSha === 'NONE'
              ? `* ℹ️ No file changes detected; no commit was created on branch \`${branchName}\`.\n`
              : `* ❌ Failed to get commit details for branch \`${branchName}\` (Step likely failed).\n`;
              core.summary.addRaw(message);
            } else {
              const commitUrl = `${repoUrl}/commit/${commitSha}`;
              core.summary.addRaw(`* ✅ Commit `)
                  .addLink(commitSha.substring(0, 7), commitUrl)
                  .addRaw(` pushed to branch \`${branchName}\`.\n`);
            }

            core.summary.addSeparator();
            await core.summary.write({ overwrite: false });

      - name: Create Pull Request
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ inputs.my_pat }}
          script: |
            const newBranch = '${{ steps.create_branch.outputs.new_branch_name_output }}';
            const baseBranch = '${{ github.event.inputs.base_branch_name }}';
            const runNumber = process.env.GITHUB_RUN_NUMBER;
            const githubUrl = process.env.GITHUB_SERVER_URL;
            const prTitle = `Version Picker changes: Run#${runNumber}`;
            const prBody = `
              Version Picker changes:
              - **Run Number**: [${runNumber} - Overview](${githubUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              - **Run ID**: ${context.runId}
              - **Date**: ${new Date().toISOString().replace('T', ' ').slice(0, 19)}
            `.trim();

            console.log(`Creating Pull Request for branch '${newBranch}' targeting '${baseBranch}'...`);

            try {
              const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              head: newBranch,
              base: baseBranch,
              body: prBody,
              draft: false,
              });

              const prUrl = pullRequest.html_url;
              const prNumber = pullRequest.number;

              console.log(`Successfully created Pull Request #${prNumber}: ${prUrl}`);
              core.setOutput("pr_url", prUrl);
              core.setOutput("pr_number", prNumber);

              core.summary
              .addHeading('Pull Request Creation', 2)
              .addRaw(`* ✅ Successfully created Pull Request `)
              .addLink(`#${prNumber}`, prUrl)
              .addRaw(`\n`)
              .addRaw(`* Target Branch: \`${baseBranch}\`\n`)
              .addSeparator();
              await core.summary.write({ overwrite: false });

            } catch (error) {
              console.error(`Failed to create Pull Request: ${error.message}`);

              const errorMsg = `Failed to create Pull Request for branch '${newBranch}' targeting '${baseBranch}'.`;
              core.summary
              .addHeading('Pull Request Creation', 3)
              .addRaw(`❌ ${errorMsg}\n`)
              .addRaw(`Error: ${error.message}\n`);

              if (error.message.includes("A pull request already exists")) {
              core.summary.addRaw(`* ℹ️ An active pull request likely already exists for this branch.\n`);
              core.warning(`PR already exists for branch '${newBranch}'.`);
              } else if (error.message.includes("No commits between")) {
              core.summary.addRaw(`* ℹ️ No commits between '${newBranch}' and '${baseBranch}'.\n`);
              core.warning(`No commits between '${newBranch}' and '${baseBranch}'.`);
              } else {
              core.setFailed(`Error creating Pull Request: ${error.message}`);
              }

              core.summary.addSeparator();
              await core.summary.write({ overwrite: false });
            }
