# .github/workflows/create-branch.yml
name: Create Branch via Script (with PAT)

# Controls when the workflow will run
on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      new_branch_name:
        description: "Name for the new branch"
        required: true
        default: "feature/new-branch"
      base_branch_name:
        description: "Branch to base the new branch on"
        required: true
        default: "main" # Or your default branch
      my_token:
        description: "GitHub Personal Access Token (PAT)"
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create_branch_job:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Permissions are no longer strictly required here IF the PAT has sufficient scope,
    # but keeping contents: write might be needed for other steps or as a fallback
    # if the PAT method has issues. It doesn't hurt to leave it.
    permissions:
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Use the github-script action, passing the PAT
      - name: Create new branch
        uses: actions/github-script@v7
        with:
          # Explicitly tell github-script to use the provided token for its octokit instance
          github-token: ${{ inputs.my_token }}
          script: |
            // Get inputs from the workflow_dispatch event
            const newBranch = '${{ inputs.new_branch_name }}';
            const baseBranch = '${{ inputs.base_branch_name }}';
            const ref = `refs/heads/${newBranch}`; // Format the ref string

            // The 'github' object provided here is now authenticated using the PAT
            // passed via 'github-token'

            console.log(`Attempting to create branch '${newBranch}' from '${baseBranch}' using PAT authentication...`);

            try {
              // 1. Get the SHA of the latest commit on the base branch
              console.log(`Fetching SHA for base branch '${baseBranch}'...`);
              const { data: baseBranchRef } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${baseBranch}`, // Ensure we specify it's a branch head
              });
              const baseSha = baseBranchRef.object.sha;
              console.log(`Base SHA for '${baseBranch}' is '${baseSha}'.`);

              // 2. Create the new branch (ref) pointing to the base branch's SHA
              console.log(`Creating ref '${ref}' pointing to SHA '${baseSha}'...`);
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: ref, // The new ref (e.g., refs/heads/feature/new-branch)
                sha: baseSha, // The SHA the new ref should point to
              });

              console.log(`Successfully created branch '${newBranch}' pointing to SHA '${baseSha}'.`);
              core.setOutput("new_branch_ref", ref); // Optional: output the ref name

            } catch (error) {
              console.error(`Error creating branch: ${error.message}`);
              if (error.status === 422) {
                // 422 Unprocessable Entity often means the ref already exists
                core.setFailed(`Failed to create branch '${newBranch}'. It might already exist. Full error: ${error}`);
              } else {
                core.setFailed(`Failed to create branch '${newBranch}'. Error: ${error}`);
              }
            }
